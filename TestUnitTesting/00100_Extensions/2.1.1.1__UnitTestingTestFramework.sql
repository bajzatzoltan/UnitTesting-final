/*
Deployment script for Releases

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "UnitTesting"
:setvar DefaultFilePrefix "UnitTesting"


GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
PRINT N'2.1.1.1 UNIT TESTING FRAMEWORK RELEASE DEPLOY START'

USE master;
GO

PRINT N'Set SQL server configuration';

-- To allow advanced options to be changed.  
EXEC sp_configure 'show advanced options', 1;  
GO  
-- To update the currently configured value for advanced options.  
RECONFIGURE;  
GO  

-- To enable the xp_cmdshell feature.  
EXEC sp_configure 'xp_cmdshell', 1;  
GO  
-- To update the currently configured value for this feature.  
RECONFIGURE;  
GO


PRINT N'Create UnitTesting database';
IF NOT EXISTS(SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
BEGIN;
	CREATE DATABASE [$(DatabaseName)];
END;
GO




USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Table [dbo].[TestFrameworkParameters]...';


GO
CREATE TABLE [dbo].[TestFrameworkParameters] (
    [ID]            INT            IDENTITY (1, 1) NOT NULL,
    [ServerName]    VARCHAR (256)  NOT NULL,
    [DatabaseName]  VARCHAR (256)  NOT NULL,
    [TestsFilePath] VARCHAR (2000) NOT NULL,
    [TestsFileName] VARCHAR (256)  NOT NULL,
    [UserName]      VARCHAR (256)  NULL,
    [UserPassword]  VARCHAR (256)  NULL,
    CONSTRAINT [TestFrameworkParameters_ID_PK] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [TestFrameworkParameters_ServerNameDatabaseName_UN] UNIQUE NONCLUSTERED ([ServerName] ASC, [DatabaseName] ASC)
);


GO
PRINT N'Creating Table [dbo].[TestResults]...';


GO
CREATE TABLE [dbo].[TestResults] (
    [ID]          INT            IDENTITY (1, 1) NOT NULL,
    [TestNumber]  NVARCHAR (20)  NOT NULL,
    [TestResult]  NVARCHAR (10)  NOT NULL,
    [MethodName]  NVARCHAR (128) NOT NULL,
    [TestName]    NVARCHAR (MAX) NOT NULL,
    [RunDatetime] DATETIME2 (7)  NOT NULL,
    CONSTRAINT [TestResults_ID_PK] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [dbo].[TestScriptsDirectorys]...';


GO
CREATE TABLE [dbo].[TestScriptsDirectorys] (
    [ID]                            INT           IDENTITY (1, 1) NOT NULL,
    [DirectoryName]                 VARCHAR (256) NOT NULL,
    [TestFrameworkParameters_ID_FK] INT           NOT NULL,
    CONSTRAINT [TestScriptsDirectorys_ID_PK] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [TestScriptsDirectorys_DirectoryName_UN] UNIQUE NONCLUSTERED ([TestFrameworkParameters_ID_FK] ASC, [DirectoryName] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[TestResults]...';


GO
ALTER TABLE [dbo].[TestResults]
    ADD DEFAULT GETDATE() FOR [RunDatetime];


GO
PRINT N'Creating Foreign Key [dbo].[TestScriptsDirectorys_TestFrameworkParameters_ID_FK]...';


GO
ALTER TABLE [dbo].[TestScriptsDirectorys] WITH NOCHECK
    ADD CONSTRAINT [TestScriptsDirectorys_TestFrameworkParameters_ID_FK] FOREIGN KEY ([TestFrameworkParameters_ID_FK]) REFERENCES [dbo].[TestFrameworkParameters] ([ID]);


GO
PRINT N'Creating Procedure [dbo].[AddTestframeworkParameters_usp]...';


GO
CREATE 
--OR ALTER 
PROCEDURE dbo.AddTestframeworkParameters_usp (
															@serverName VARCHAR(256) = @@SERVERNAME,
															@databaseName VARCHAR(256),
															@testsFilePath VARCHAR(2000),
															@testsFileName VARCHAR(256) = 'RunTests.ps1',
															@userName VARCHAR(256) = NULL,
															@userPassword VARCHAR(256) = NULL
															)
AS 
BEGIN;
	SET NOCOUNT ON;
	DECLARE @countInsertedRows INT;
	DECLARE @insertedCountMessage NVARCHAR(200);
	IF (@databaseName IS NULL OR @testsFilePath IS NULL OR @serverName IS NULL)
		BEGIN;
			RAISERROR('NULL values of @databaseName or @testsFilePath or @serverName parameter are not allowed! ', 16, 1);
		END;
	
	INSERT INTO [dbo].[TestFrameworkParameters] (ServerName, DatabaseName, TestsFilePath, TestsFileName, UserName, UserPassword) 
										VALUES (@serverName, @databaseName, @testsFilePath, @testsFileName, @userName, @userPassword);
	SET @countInsertedRows = @@ROWCOUNT;
	SET @insertedCountMessage = CONCAT('Rows number to UnitTesting.dbo.TestFrameworkParameters was inserted: ', @countInsertedRows);
	RAISERROR (@insertedCountMessage, 0, 1) WITH NOWAIT;
END;
GO
PRINT N'Creating Procedure [dbo].[AddTestScriptDirectory_usp]...';


GO
CREATE 
--OR ALTER 
PROCEDURE dbo.AddTestScriptDirectory_usp (	
															@serverName VARCHAR(256) = @@SERVERNAME,
															@databaseName VARCHAR(256),
															@directoryName VARCHAR(256)
															)
AS
BEGIN;
	SET NOCOUNT ON;
	DECLARE @testframeworkParametersID INT;
	DECLARE @countInsertedRows INT;
	DECLARE @insertedCountMessage NVARCHAR(200);

	SELECT @testframeworkParametersID = ID FROM dbo.TestFrameworkParameters			
		WHERE ServerName = @serverName 
				AND DatabaseName = @databaseName;
	BEGIN TRY;
		INSERT INTO dbo.TestScriptsDirectorys (DirectoryName, TestFrameworkParameters_ID_FK) VALUES (@directoryName, @testframeworkParametersID);
		SET @countInsertedRows = @@ROWCOUNT;
	END TRY
	BEGIN CATCH;
		SET @countInsertedRows = @@ROWCOUNT;
	END CATCH
	SET @insertedCountMessage = CONCAT('Rows number to UnitTesting.dbo.TestScriptsDirectorys was inserted: ', @countInsertedRows);
	RAISERROR (@insertedCountMessage, 0, 1) WITH NOWAIT;
END;
GO
PRINT N'Creating Procedure [dbo].[DeleteTestScriptDirectory_usp]...';


GO
CREATE 
--OR ALTER 
PROCEDURE dbo.DeleteTestScriptDirectory_usp (	
															@serverName VARCHAR(256) = @@SERVERNAME,
															@databaseName VARCHAR(256),
															@directoryName VARCHAR(256)
															)

AS
BEGIN;
	SET NOCOUNT ON;
	DECLARE @testframeworkParametersID INT;
	DECLARE @countDeletedRows INT;
	DECLARE @deletedCountMessage NVARCHAR(200);

	SELECT @testframeworkParametersID = ID FROM dbo.TestFrameworkParameters			
		WHERE ServerName = @serverName 
				AND DatabaseName = @databaseName;

	DELETE FROM dbo.TestScriptsDirectorys
		WHERE TestFrameworkParameters_ID_FK = @testframeworkParametersID 
				AND DirectoryName =  @directoryName;
	SET @countDeletedRows = @@ROWCOUNT;
	SET @deletedCountMessage = CONCAT('Rows number to UnitTesting.dbo.TestScriptsDirectorys was deleted: ', @countDeletedRows);
	RAISERROR (@deletedCountMessage, 0, 1) WITH NOWAIT;
END;
GO
PRINT N'Creating Procedure [dbo].[ExecuteTests_usp]...';


GO
CREATE 
--OR ALTER 
PROCEDURE dbo.ExecuteTests_usp (
												@databaseName VARCHAR(256), 
												@directoryName VARCHAR(256),
												@serverName VARCHAR(256) = @@SERVERNAME
												)
AS
BEGIN;
	DECLARE @serverName_var VARCHAR(256);
	DECLARE @databaseName_var VARCHAR(256);
	DECLARE @testsFilePath VARCHAR(2000);
	DECLARE @testsFileName VARCHAR(256);	
	DECLARE @testScriptsDirectoryName VARCHAR(256);
	DECLARE @userName VARCHAR (256);
	DECLARE @userPassword VARCHAR (256);
	DECLARE @pathAndFileName VARCHAR(2000)
	DECLARE @powershellScript VARCHAR(4000);

	BEGIN TRY;
	TRUNCATE TABLE dbo.TestResults
	DBCC CHECKIDENT ('dbo.TestResults', RESEED, 1) WITH NO_INFOMSGS

	SELECT	@serverName_var = TFP.ServerName, 
			@databaseName_var = TFP.DatabaseName, 
			@testsFilePath = TFP.TestsFilePath,
			@testsFileName = TFP.TestsFileName,
			@testScriptsDirectoryName = TSD.DirectoryName,
			@userName = TFP.UserName,
			@userPassword = TFP.UserPassword
		FROM dbo.TestFrameworkParameters AS TFP
		INNER JOIN dbo.TestScriptsDirectorys AS TSD
			ON TFP.ID = TSD.TestFrameworkParameters_ID_FK
		WHERE	TSD.DirectoryName = @directoryName
				AND TFP.DatabaseName = @databaseName
				AND TFP.ServerName = @serverName;
	
	If(@testsFilePath IS NULL OR @testsFileName IS NULL OR @testScriptsDirectoryName IS NULL OR @serverName_var IS NULL OR @databaseName_var IS NULL)
		BEGIN;
			RAISERROR('Some columns of TestScriptsDirectorys or TestFrameworkParameters table are null! ', 16, 1);
		END;
	
	SET @testsFilePath = REPLACE(@testsFilePath, ' ', '` '); 
	SET @pathAndFileName = CONCAT(@testsFilePath, @testsFileName);

	SET @powershellScript = CONCAT(	'powershell -command ', '"', @pathAndFileName,  '"',
								' -scriptDirectory ', '''', @testScriptsDirectoryName, '''',
								' -server ', '''', @serverName_var,'''', 
								' -database ', '''',  @databaseName_var,'''',
								' -userName ', '''',  @userName,'''',
								' -password ', '''',  @userPassword,'''');

	EXEC xp_cmdshell @powershellScript;	
	END TRY
	BEGIN CATCH
		PRINT( CONCAT('ERROR_NUMBER: ', ERROR_NUMBER()));
		PRINT( CONCAT('ERROR_SEVERITY: ', ERROR_SEVERITY()));
		PRINT( CONCAT('ERROR_STATE: ', ERROR_STATE()));
		PRINT( CONCAT('ERROR_PROCEDURE: ', ERROR_PROCEDURE()));
		PRINT( CONCAT('ERROR_MESSAGE: ', ERROR_MESSAGE()));
	END CATCH;
END;
GO
PRINT N'Creating Procedure [dbo].[ModifyTestframeworkParameters_usp]...';


GO
CREATE 
--OR ALTER 
PROCEDURE dbo.ModifyTestframeworkParameters_usp (
															@serverName VARCHAR(256) = @@SERVERNAME,
															@databaseName VARCHAR(256),
															@testsFilePath VARCHAR(2000)= NULL,
															@testsFileName VARCHAR(256) = NULL,
															@userName VARCHAR(256) = NULL,
															@userPassword VARCHAR(256) = NULL
															)
AS 
BEGIN;
	SET NOCOUNT ON;
	DECLARE @dynstring NVARCHAR(800);
	DECLARE @updatedColumns NVARCHAR(500);
	DECLARE @countUpdatedRows INT;
	DECLARE @updatedCountMessage NVARCHAR(200);
	DECLARE @whereString NVARCHAR(200);

	SET @dynstring = 'UPDATE [dbo].[TestFrameworkParameters] SET ';
	SET @updatedColumns = CONCAT_WS(',',
									' TestsFilePath = ''' + @testsFilePath + '''',
									' TestsFileName = '''+ @testsFileName + '''',
									' UserName = ''' + @userName + '''',
									' UserPassword = ''' + @userPassword + '''');

	IF (@serverName IS NOT NULL AND @databaseName IS NOT NULL)
		BEGIN;
			SET @whereString = CONCAT(' WHERE ServerName = ''', @serverName, ''' AND DatabaseName = ''', @databaseName, ''';') 
		END;
	
	IF (@updatedColumns NOT LIKE '' AND @whereString NOT LIKE '')
		BEGIN;
			SET @dynstring = @dynstring + @updatedColumns + @whereString;
			EXEC sp_executesql @dynstring;
			SET @countUpdatedRows = @@ROWCOUNT;
			SET @updatedCountMessage = CONCAT('Rows number to UnitTesting.dbo.TestFrameworkParameters was updated: ', @countUpdatedRows);
			RAISERROR (@updatedCountMessage, 0, 1) WITH NOWAIT;
		END;
	ELSE
		BEGIN;
			SET @countUpdatedRows = @@ROWCOUNT;
			SET @updatedCountMessage = CONCAT('Rows number to UnitTesting.dbo.TestFrameworkParameters was updated: ', @countUpdatedRows);
			RAISERROR (@updatedCountMessage, 0, 1) WITH NOWAIT;
		END;
END;
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[TestScriptsDirectorys] WITH CHECK CHECK CONSTRAINT [TestScriptsDirectorys_TestFrameworkParameters_ID_FK];


GO
PRINT N'DEPLOY COMPLETE.';


GO
